name: PR Comment Guard

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review, converted_to_draft]

permissions:
  contents: read

jobs:
  comment-only:
    name: Ensure Only Comments Change
    runs-on: windows-2022
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.draft == false) ||
      (github.event_name == 'pull_request_target' && github.event.pull_request.draft)
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Verify comment-only changes
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          function Format-DiffLines {
            param(
              [string[]] $Lines,
              [string] $File
            )

            $output = @()
            $seenHeader = $false
            $seenMinus = $false
            $seenPlus = $false

            foreach ($line in $Lines) {
              if (-not $seenHeader -and $line -like 'diff --git*') {
                $output += "diff --git a/$File b/$File"
                $seenHeader = $true
                continue
              }

              if (-not $seenMinus -and $line -like '--- *') {
                $output += "--- a/$File"
                $seenMinus = $true
                continue
              }

              if (-not $seenPlus -and $line -like '+++ *') {
                $output += "+++ b/$File"
                $seenPlus = $true
                continue
              }

              $output += $line
            }

            return $output
          }

          $baseSha = '${{ github.event.pull_request.base.sha }}'
          $baseRef = '${{ github.event.pull_request.base.ref }}'
          if ([string]::IsNullOrWhiteSpace($baseSha)) {
            Write-Error 'Cannot resolve base commit SHA for the pull request.'
          }

          if (-not (Get-Command clang.exe -ErrorAction SilentlyContinue)) {
            Write-Error 'clang.exe not found on PATH (expected on windows-2022 runner).'
          }

          if (-not [string]::IsNullOrWhiteSpace($baseRef)) {
            git fetch --no-tags origin $baseRef --depth=1 | Out-Null
          } else {
            git fetch --no-tags origin $baseSha --depth=1 | Out-Null
          }

          git rev-parse --verify $baseSha | Out-Null

          $worktreeRoot = Join-Path $env:RUNNER_TEMP "pr-comment-guard"
          if (Test-Path $worktreeRoot) {
            Remove-Item $worktreeRoot -Recurse -Force
          }
          New-Item -ItemType Directory -Path $worktreeRoot | Out-Null

          $baseWorktree = Join-Path $worktreeRoot 'base'
          git worktree add --detach $baseWorktree $baseSha | Out-Null

          try {
            $files = git diff --name-only --diff-filter=ACMR $baseSha HEAD | Where-Object { $_ -ne '' }
            if (-not $files) {
              Write-Host 'No tracked changes detected.'
              exit 0
            }

            $includeRoots = @(
              '.',
              'src',
              'src/common',
              'src/plugins',
              'src/plugins/shared',
              'include',
              'common',
              'plugins',
              'plugins/shared',
              'tools'
            )
            $headIncludeArgs = @()
            foreach ($rel in $includeRoots) {
              $candidate = Join-Path (Get-Location) $rel
              if (Test-Path $candidate) {
                $headIncludeArgs += '-isystem'
                $headIncludeArgs += $candidate
              }
            }

            $baseIncludeArgs = @()
            foreach ($rel in $includeRoots) {
              $candidate = Join-Path $baseWorktree $rel
              if (Test-Path $candidate) {
                $baseIncludeArgs += '-isystem'
                $baseIncludeArgs += $candidate
              }
            }

            $violations = @()

            foreach ($file in $files) {
              $extension = [System.IO.Path]::GetExtension($file)
              $normalizedExt = $extension.ToLowerInvariant()
              $trackedExtensions = @('.c', '.cc', '.cpp', '.cxx', '.h', '.hh', '.hpp', '.hxx', '.ipp', '.inl')

              if ($trackedExtensions -notcontains $normalizedExt) {
                Write-Host "Skipping file '$file' (extension '$extension') for comment diff guard."
                continue
              }

              $basePath = Join-Path $baseWorktree $file
              $headPath = Join-Path (Get-Location) $file

              if (-not (Test-Path $basePath)) {
                $violations += [pscustomobject]@{ File = $file; Message = "File '$file' is new or deleted; only comment edits are allowed."; Diff = $null }
                continue
              }

              if (-not (Test-Path $headPath)) {
                $violations += [pscustomobject]@{ File = $file; Message = "File '$file' is missing in PR head; deletions are not allowed."; Diff = $null }
                continue
              }

              $baseTmp = [System.IO.Path]::GetTempFileName()
              $headTmp = [System.IO.Path]::GetTempFileName()

              try {
                $clangArgsBase = @('-E', '-P', '-w', '-x', 'c++') + $baseIncludeArgs + @('-o', $baseTmp, $basePath)
                $clangArgsHead = @('-E', '-P', '-w', '-x', 'c++') + $headIncludeArgs + @('-o', $headTmp, $headPath)

                $clangBaseOutput = & clang.exe @clangArgsBase 2>&1
                if ($LASTEXITCODE -ne 0) {
                  $violations += [pscustomobject]@{ File = $file; Message = "clang failed to preprocess base version."; Diff = $clangBaseOutput }
                  continue
                }

                $clangHeadOutput = & clang.exe @clangArgsHead 2>&1
                if ($LASTEXITCODE -ne 0) {
                  $violations += [pscustomobject]@{ File = $file; Message = "clang failed to preprocess head version."; Diff = $clangHeadOutput }
                  continue
                }

                $diffResult = git -c core.autocrlf=false -c core.safecrlf=false diff --no-index --unified=6 --exit-code -- $baseTmp $headTmp 2>&1
                if ($LASTEXITCODE -eq 1) {
                  $diffLines = $diffResult -split [Environment]::NewLine
                  $formattedLines = Format-DiffLines -Lines $diffLines -File $file
                  $violations += [pscustomobject]@{ File = $file; Message = "Non-comment changes detected."; Diff = $formattedLines }
                } elseif ($LASTEXITCODE -ne 0) {
                  $violations += [pscustomobject]@{ File = $file; Message = "Diff command failed."; Diff = $diffResult }
                }
              } finally {
                Remove-Item -Path $baseTmp, $headTmp -ErrorAction SilentlyContinue
              }
            }

            if ($violations.Count -gt 0) {
              foreach ($violation in $violations) {
                $file = $violation.File
                $message = $violation.Message
                $diffText = $violation.Diff

                if ([string]::IsNullOrEmpty($message)) {
                  $message = 'Unknown error'
                }

                $annotation = "::error"
                if (-not [string]::IsNullOrEmpty($file)) {
                  $annotation += " file=$file"
                }
                $annotation += "::$message"

                Write-Host $annotation
                if ($diffText) {
                  Write-Host ("Diff for {0}:" -f $file)
                  if ($diffText -is [System.Array]) {
                    $joinedDiff = [string]::Join([Environment]::NewLine, $diffText)
                    Write-Host $joinedDiff
                  } else {
                    Write-Host $diffText
                  }
                }
              }
              exit 1
            }

            Write-Host 'All checked files differ only in comments.'
          } finally {
            git worktree remove --force $baseWorktree | Out-Null
            Remove-Item $worktreeRoot -Recurse -Force -ErrorAction SilentlyContinue
          }
